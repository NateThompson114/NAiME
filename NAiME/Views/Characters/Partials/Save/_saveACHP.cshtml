@using NAiME.Models.Character
@model NAiME.Models.Character.Character

<div class="container-fluid border rounded text-center">
    <div class="row">
        <div class="col border">
            <div class="form-group">
                @Html.LabelFor(m => m.ArmourClass)
                @Html.TextBoxFor(m => m.ArmourClass, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.ArmourClass)
            </div>
        </div>
        <div class="col border">
            <div class="form-group">
                <p>Initiative</p>
                <h4 class="text-lg-center" id="initiative">0</h4>
            </div>
        </div>
        <div class="col border">
            <div class="form-group">
                @Html.LabelFor(m => m.Speed)
                @Html.TextBoxFor(m => m.Speed, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Speed)
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col border">
            <div class="form-group">
                @Html.LabelFor(m => m.CharacterHitPoints.HitPointsCurrent)
                @Html.TextBoxFor(m => m.CharacterHitPoints.HitPointsCurrent, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.CharacterHitPoints.HitPointsCurrent)
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col border">
            <div class="form-group">
                @Html.LabelFor(m => m.CharacterHitPoints.HitPointsMaximum)
                @Html.TextBoxFor(m => m.CharacterHitPoints.HitPointsMaximum, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.CharacterHitPoints.HitPointsMaximum)
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col border">
            <div class="form-group">
                @Html.LabelFor(m => m.CharacterHitPoints.HitPointsTemporary)
                @Html.TextBoxFor(m => m.CharacterHitPoints.HitPointsTemporary, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.CharacterHitPoints.HitPointsTemporary)
            </div>
        </div>
        <div class="col border">
            <div class="form-group">
                @Html.LabelFor(m => m.Miserable)
                @Html.CheckBoxFor(m => m.Miserable, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Miserable)
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col border">
            <div class="form-group">
                @Html.LabelFor(m => m.CharacterHitDices.HitDice)
                @Html.TextBoxFor(m => m.CharacterHitDices.HitDice, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.CharacterHitDices.HitDice)
            </div>
        </div>
        <div class="col border">
            <div class="form-group">
                @Html.LabelFor(m => m.CharacterHitDices.Total)
                @Html.TextBoxFor(m => m.CharacterHitDices.Total, new { type = "number", min = 1, @class = "form-control" })
                @Html.ValidationMessageFor(m => m.CharacterHitDices.Total)
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col border">
            <div class="form-group">
                @Html.LabelFor(m => m.CharacterDeathThrows.Succes)
                @Html.TextBoxFor(m => m.CharacterDeathThrows.Succes, new { type = "number", min = 0, max = 3, @class = "form-control" })
                @Html.ValidationMessageFor(m => m.CharacterDeathThrows.Succes)
            </div>
        </div>
        <div class="col border">
            <div class="form-group">
                @Html.LabelFor(m => m.CharacterDeathThrows.Failure)
                @Html.TextBoxFor(m => m.CharacterDeathThrows.Failure, new { type = "number", min = 0, max = 3, @class = "form-control" })
                @Html.ValidationMessageFor(m => m.CharacterDeathThrows.Failure)
            </div>
        </div>
    </div>
</div>